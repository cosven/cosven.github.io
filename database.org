* 菜鸟学数据库                                                     :database:
** SQL 100% 覆盖率
目标：试图找到一个视角，可以梳理对优化器正确性问题的全覆盖。主要看 SELECT 查询。
*** 视角1：Doris SQL 的文法规则
从 query 的根节点开始看：cte 主要就是由 query 组成，所以主要的复杂度在 querySpecification
这个规则里面。
#+BEGIN_SRC antlr
  query
      : cte? queryTerm queryOrganization
      ;

  queryTerm
      : queryPrimary
      | left=queryTerm operator=(UNION | EXCEPT | INTERSECT)
          setQuantifier? right=queryTerm
      ;

  queryOrganization
      : sortClause? limitClause?
      ;

  queryPrimary
      : querySpecification                                                   #queryPrimaryDefault
      | LEFT_PAREN query RIGHT_PAREN                                         #subquery
      ;
#+END_SRC

看看 querySpecification
#+BEGIN_SRC antlr
querySpecification
    : selectClause
      fromClause?
      whereClause?
      aggClause?
      havingClause?
      {doris_legacy_SQL_syntax}? queryOrganization                         #regularQuerySpecification
    ;
#+END_SRC

selectClause 里面可以有哪些元素？从下面的规则可以看出来，selectClause 的复杂度主要在
expression。distinct, ASTERISK 也是一些可变项。
#+BEGIN_SRC antlr
  selectClause
      : SELECT selectHint? DISTINCT? selectColumnClause
      ;

  selectColumnClause
      : namedExpressionSeq
      | ASTERISK EXCEPT LEFT_PAREN namedExpressionSeq RIGHT_PAREN
      ;

  namedExpressionSeq
    : namedExpression (COMMA namedExpression)*
    ;

  namedExpression
    : expression (AS? (identifierOrText))?
    ;
#+END_SRC

另外
- fromClause 的复杂度
  - fromClause 里面会使用 query
  - join 类型
  - join 条件
    - booleanExpression
    - USING identifierList（不知道是个啥）
  - lateralView
  - ???
- whereClause 的复杂度等价于 booleanExpression
- aggClause 的复杂度有
  - ROLLUP/CUBE/expression/expression,.../groupingSet
- havingClause 的复杂度等价于 booleanExpression

总的来说，query 的主要复杂度之一就是 expression。

expression 复杂度
- 架子上：expression 可以加上 bitand, not, and, or, ||, () 等符号。从而递归。
- expression 自身的主要复杂度对应 primaryExpression 语法规则
  - 架子上： primaryExpression 一个复杂度来自它的函数种类，有这么几大类
    - 日期相关： TIMESTAMPDIFF, DATEDIFF, ADDDATE 等等
    - case when 语句
    - cast
    - 常量, interval, *
    - functionIdentifier( distinct|all? expression (order by sortItem)?)

几种相对不常见的语法的含义
1. having 子句：由于 where 语句里面不能使用 agg 函数，而 having 子句可以。
   同时，having 子句里面的列和 select 类似，也需要遵守 group by 语义规则。
   having 子句和 group by 是一起出现的。
2. 窗口函数（分析函数）：窗口函数也可以分组排序，和 group by + order by 不同的是，
   它不会改变结果集的行数（group by 会聚合）。
3. distinct 被单独划分为一类

*** TODO [#A] 视角N：常问几个问题
- [ ] 给定一个 topn 修改的 PR，怎样确定要覆盖哪些内容？
  - 根据 SQL 种子来覆盖 -> 不足之处是太黑盒，说不出覆盖率如何
  - 再比如为啥 limit 遇到同级的窗口函数时，不能产生 topn 呢？
    这个问题其实从语义上就能解释，而不需要了解过多原理。

** 数据库的 JOIN
*** JOIN 算法

join 算法的思路
1. nested loop join -> O(N^2)
2. sort merge join -> O(NlogN)
3. hash join -> O(N)

*** JOIN 类型与区别                                               :optimizer:
- INNER JOIN：如果表中有至少一个匹配，则返回行（join 默认就是 inner join）
- OUTER JOIN
  - LEFT [OUTER] JOIN：即使右表中没有匹配，也从左表返回所有的行，右边会补 null
  - RIGHT [OUTER] JOIN：即使左表中没有匹配，也从右表返回所有的行，左边补 null
  - FULL [OUTER] JOIN：只要其中一个表中存在匹配，则返回行
- CROSS JOIN：笛卡尔积，左边的每一行都和右边的所有行都产生一个 join 结果。
  据说这种用法比较少。
- 特殊 JOIN（这些 JOIN 只取坐标或者右表数据）
  - SEMI JOIN：只能查一个表的列。和 INNER JOIN 相似。
    - LEFT SEMI JOIN 是取交集后，再取左表的列
  - ANTI JOIN：只能查一个表的列。和 INNER JOIN 相反。
    - LEFT ANTI JOIN 是左表减去左右交集部分（INNER JOIN 是取交集）
- UNION
  - UNION：似乎是取交集的意思
  - UNION ALL：似乎是取并集的意思（结果里面允许有重复行）
- UNION 和 INNER JOIN 区别在于：
  - UNION 要求两个表的列都是一样的，结果集的列数和任意一个表一样
  - JONI 是把两个标的列加在一起，新的列的个数是两者之和

新扩展的 join 类型
1. mark join：在 join 的时候，额外的加一列，来标记某一行是否被过滤掉了。
   背景：关联子查询的一种常见优化是把它改写成 semi join，但当条件里面有 or 的时候，
   这个优化就不那么适用了，mark join 就是解决这个问题的。
   参考资料：https://emmymiao87.github.io/jekyll/update/2021/07/25/Mark-Join.html
   #+BEGIN_SRC sql
     select l_orderkey
     from lineitem
     where exists
         (select *
          from orders
          where o_orderkey = l_orderkey )
       or l_linenumber in (1,
                           2,
                           3);
   #+END_SRC
2. single join：它的 single 体现为子查询里面最多只能返回一行。
   这个资料说对于关联子查询的情况，可以转换成 left outer join。
   参考资料：https://zhuanlan.zhihu.com/p/614953165
   资料太少，似乎没必要细究。
   #+BEGIN_SRC sql
    --q3 包含相关子查询，目的是查找教授的id和name，以及这个教授的助教的名字。
    --因为相关子查询位于select后，按照SQL标准，要求对于每一次输出的PersId，
    --子查询最多仅可以返回一个结果，即一个PersId对应一个助教或无助教。
    select PersId, p.Name, (select a.Name
                            from Assistants a
                            where a.Boss = p.PersId
                            and JobTitle = 'personal assistant')
    from Professors p
  #+END_SRC


*** JOIN 的几种的 shuffle 算法
1. broadcast join 的网络传输成本是：小表*节点数。适用于大表join极小表。
2. shuffle join 的网络传输成本是：左表+右表。据说适用于大表join小表。
3. doris 还支持 bucket shuffle join，解决一种特殊场景，当 join key 是数据分布列的时候，
   只需要把一个表的数据传输到另外一个表所在的节点即可。和 shuffle join 的区别是，
   shuffle join 需要把两个表的数据计算 hash 之后，相同 hash 的分布到一个节点。
4. colocate 的网络传输成本是 0。

https://doris.apache.org/zh-CN/docs/dev/query-acceleration/join-optimization/doris-join-optimization

1. broadcast join（网络复杂度：N * T(R)）
2. shuffle join（网络复杂度：T(S) + T(R)）
3. bucket shuffle join（网络复杂度：T(R)）
4. colocate/local join （网络传输：0）

** TODO [#A] 读懂 doris 的执行计划                                :optimizer:
拿到两个执行计划，一个是有 PhysicalDistribute，一个没有。那它们区别是什么呢？
优化器开发者看到这个时，会觉得这两个计划分别对应 broadcast join / shuffle join。
怎样才能有这个条件反射呢？

#+BEGIN_SRC
--hashJoin[RIGHT_OUTER_JOIN](t1.bk_x = t2.bk_x)(t1.ydate = t2.bus_x)
----PhysicalDistribute
------PhysicalProject
--------PhysicalOlapScan[flt_prod_nav]
----PhysicalDistribute
------PhysicalLimit
#+END_SRC

#+BEGIN_SRC
--hashJoin[RIGHT_OUTER_JOIN](t1.bk_x = t2.bk_x)(t1.ydate = t2.bus_x)
----PhysicalDistribute
------PhysicalProject
--------PhysicalOlapScan[flt_prod_nav]
----PhysicalDistribute
------PhysicalLimit
#+END_SRC

有几个需要理解的点

*** exechange/sink/distribute 都是啥意思？
Doris 文档上说了下面这句话。可以推断，DataStreamSink 是发送数据的节点，ExechangeNode 是接口数据的节点。
两者都是成对出现。加之，[[https://docs.starrocks.io/zh/docs/administration/Query_planning/#%E5%88%86%E6%9E%90-query-plan][StarRocks 分析 Query Plan]] 这一节讲的比较具体。基本可以确定。
而认真对比 doris 的 explain 和 explain shape plan 可以发现，PhysicalDistribute
这个对应了发送和接口，语义上也是“分布数据”的意思。因此这个就说的通了。
#+BEGIN_QUOTE
每个Fragment之间都通过 DataStreamSink 和 ExchangeNode 进行数据传输。
#+END_QUOTE

*** TODO runtime filter

** TODO [#C] 读懂 doris 的 sql profile

1. 一个可以关注的指标是 ScannerFilterTime（表过滤耗时）：可能是 be 表达式计算太慢。
   比如 7547。

** 查询计划的生成流程

根据 [[https://mp.weixin.qq.com/s/iUnzVQYAeYTqD1JqBkF_sg][【源码解析系列】 Apache Doris 查询源码解析]]，查询计划的生成流程为：
1. 语法解析
2. 语义解析（包含：表存在性检查等）
3. query 改写
   1. 表达式改写
   2. 子查询解嵌套
4. 单机执行计划
   1. join reorder
   2. 谓词下推
5. 注：步骤3和4的一些区别
   1. 输出仍然是一个 AST，而 4 的输出就是一个执行计划了
   2. 会用上其它的上下文，比如统计信息，join reorder 就是一个例子
   3. GPT 说谓词下推也是可以在步骤3进行，看具体实现
   4. 个人看代码，4 里面也会有表达式改写（比如恒真或恒假的条件消除）
   5. Infer predicates 属于 plan rewriter
