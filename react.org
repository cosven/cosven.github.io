* React
** ANSWERED [#C] React 怎样写一个有特定功能的基础组件？
- [X] 问题一：我自己实现的 UserSelect 组件中已经绑定了 onChange 回调，
但是我仍然想允许用户设置 onChange 回调，这时我该怎么办？

React 中的组件都是使用『组合』的形式来扩展功能。

对于问题一这种情况，我们可以在自己实现的 onChange
函数中调用一下用户设置的 onChange 函数。另外，在 React 中，
[[https://react-cn.github.io/react/docs/transferring-props.html][透传 props]] 似乎也是一种常见的设计模式。

** React Component Lifecyle  :reading:react:
[[https://github.com/ReactTraining/react-router/blob/c865bc6b331eabd853641dcc7e0224a7dce76f3b/docs/guides/ComponentLifecycle.md][React route: Component Lifecycle]]

从 route 角度来看 Component Lifecyle 涉及到的问题

1. 初始化时，在什么地方获取数据
2. 更新时，在什么地方获取数据

*** Where fetch data: componentwillmount vs componentdidmount
[[https://daveceddia.com/where-fetch-data-componentwillmount-vs-componentdidmount/][Where fetch data: componentwillmount vs componentdidmount]]

答案是：在 componentDidMount 获取后端数据

#+BEGIN_QUOTE
In practice, componentDidMount is the best place to put calls to fetch data, for two reasons:

Using DidMount makes it clear that data won’t be loaded until after the initial render. This reminds you to set up initial state properly, so you don’t end up with undefined state that causes errors.

If you ever need to render your app on the server (SSR/isomorphic/other buzzwords), componentWillMount will actually be called twice – once on the server, and again on the client – which is probably not what you want. Putting the data loading code in componentDidMount will ensure that data is only fetched from the client.
#+END_QUOTE

*** componentWillReceiveprops 使用分析
[[http://www.cnblogs.com/gdsblog/p/7348375.html][componentWillReceiveProps 使用详解]]

可以在 componentWillReceiveProps 中 setState。

** 箭头函数和普通函数的区别
推荐阅读 [[https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Functions/Arrow_functions][mozilla 文档]].
