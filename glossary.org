* 术语

** 反射
*** 概念定义
reflection is the ability of a computer program to examine,
 introspect, and modify its own structure and behavior at runtime.
-- wikipedia

*** 应用
比如 Python 中：type, issubclass, getattr 等方法都是
反射功能的体现。可以在运行时查看一个类、一个对象有什么属性和方法。
使用 setattr 方法可以给一个对象增加一个方法。

Java 中 Class.forName 方法也都是反射功能的体现。

** 泛型
*** 概念定义
=泛型= 允许程序员在强类型程序设计语言中编写代码时使用一些以后才指定的类型，
在实例化时作为参数指明这些类型。
-- wikipedia

比如 C++ 中有模板

** 接口
** 鸭子类型
*** 概念定义
duck typing is an application of the duck test in type safety.
-- wikipedia

鸭子测试：“当看到一只鸟走起来像鸭子、游泳起来像鸭子、叫起来也像鸭子，
那么这只鸟就可以被称为鸭子。”

*** 应用
静态语言 Java 的反射机制可以达到鸭子类型的效果，[[https://stackoverflow.com/questions/1079785/whats-an-example-of-duck-typing-in-java][例子]]

** lambda 表达式
*** 概念理解
我们把“一块代码”赋给了一个变量。而“这块代码”，或者说“这个被赋给一个变量的函数”，
就是一个Lambda表达式。
-- zhihu

编程中提到的 lambda 表达式，通常是在需要一个函数，但是又不想费神去
命名一个函数的场合下使用，也就是指匿名函数。
-- zhihu

** 闭包
在计算机科学中，闭包（Closure）是词法闭包（Lexical Closure）的简称，
是引用了自由变量的函数。这个被引用的自由变量将和这个函数一同存在，
*即使已经离开了创造它的环境也不例外* 。所以，有另一种说法认为闭包是由
函数和与其相关的引用环境组合而成的实体。
-- wikipedia

> 闭包就是把函数以及变量包起来，使得变量的生存周期延长。

*** 应用
1. 闭包使得局部变量在函数外被访问成为可能
2. 闭包可以帮助避免了使用全局变量

用 Python 举个例子：

#+BEGIN_SRC python
def a(x):
    i = 0
    def b():
        print(i)
    return b
b()  # 输出 0
#+END_SRC
** 模式匹配
好像许多函数式编程都有这个特性，举个例子来理解模式匹配：

没有模式匹配特性的语言写出来的代码大概长这个样子
#+BEGIN_SRC
int fib(int n) {
    if(n == 0) return 1;
    if(n == 1) return 1;
    return fib(n – 2) + fib(n – 1);
}
#+END_SRC

有模式匹配的语言可以这样写（编译器为其实现了分支）
#+BEGIN_SRC
int fib(0) {
    return 1;
}

int fib(1) {
    return 1;
}

int fib(int n) {
    return fib(n – 2) + fib(n – 1);
}
#+END_SRC
** 依赖注入、控制发转

- 依赖注入是实现控制反转的一种方式
- 控制反转是一种思想；依赖注入是一种设计模式

*** 控制反转
控制反转是为了解耦，

#+BEGIN_QUOTE
我也从其中获得了这样的感悟 如果一个类A 的功能实现需要借助于类B，
那么就称类B是类A的依赖，如果在类A的内部去实例化类B，
那么两者之间会出现较高的耦合，一旦类B出现了问题，类A也需要进行改造，
如果这样的情况较多，每个类之间都有很多依赖，那么就会出现牵一发而动全身的情况，
程序会极难维护，并且很容易出现问题。要解决这个问题，
就要把A类对B类的控制权抽离出来，交给一个第三方去做，把控制权反转给第三方，
就称作控制反转（IOC Inversion Of Control）

-- https://www.zhihu.com/question/32108444/answer/309208647
#+END_QUOTE

举个例子：

*** 依赖注入
应用场景：单元测试中的 fixture 好像使用的这个模式？

[[https://learnku.com/articles/5222/simply-explain-what-dependency-injection-and-control-inversion-are][这篇博客]]非常通俗的解释了什么是依赖注入。

参考资料：https://github.com/google/dpy

** 七层/四层负载均衡
#+BEGIN_QUOTE
- 所谓四层就是基于IP+端口的负载均衡
- 七层就是基于URL等应用层信息的负载均衡
- 同理，还有基于MAC地址的二层负载均衡和基于IP地址的三层负载均衡

所谓四层负载均衡，也就是主要通过报文中的目标地址和端口，
再加上负载均衡设备设置的服务器选择方式，决定最终选择的内部服务器。

所谓七层负载均衡，也称为“内容交换”，也就是主要通过报文中的真正有意义的应用层内容，
再加上负载均衡设备设置的服务器选择方式，决定最终选择的内部服务器。

-- https://www.jianshu.com/p/fa937b8e6712
#+END_QUOTE

** 滑动窗口

滑动窗口在不同的上下文中，意义都不一样。

引入了慢缩容机制同时增加收缩滑动窗口以达到消峰的作用
https://mp.weixin.qq.com/s/lfN9O7qwWQZCx_iqiAqP0g

而在 TCP 协议中，它也有滑动窗口的概念，请看[[https://www.zhihu.com/question/32255109/answer/68558623][知乎解答]]。

** 长尾问题

[[https://www.zhihu.com/question/20027490/answer/494292318][知乎]]上一个比较通俗的解释：它们单个的值虽然极低，但是这个长长的尾巴，总和不可小觑
（请配合[[https://zh.wikipedia.org/wiki/%E9%95%BF%E5%B0%BE][维基百科]]上的图来理解）。

搜了下资料，似乎不怎么存在『长尾问题』这个词语，一般说『长尾效应』，也称『长尾』，
英文为：The Long Tail。
** NVMe vs SATA

- https://zh.wikipedia.org/wiki/NVM_Express
- https://blog.csdn.net/u012459957/article/details/51226658
- https://zhuanlan.zhihu.com/p/26172972

记了如下零散结论，从结论中应该可以了解这些概念之间的关系

- AHCI 是为 SATA 设计的控制器接口，定义了存储设备和主机之间的信息如何传递
- 传统的 SATA 连接只能支持一个队列，一次只能接收 32 条数据，
  而 NVMe 存储支持最多 64000 个队列，每个队列有 64000 个条目
- NVMe 使用原生 PCIe 通道，免去了 SATA 与 SAS 接口的主机适配器与 CPU
  通信所带来的延时
- 绝大多数 SATA 硬盘都支持 AHCI
- AHCI 它允许软件与 SATA 储存装置沟通的硬件机制，可让 SATA 储存装置启用进阶 SATA
  功能，例如原生指令队列及热插入
- SATA 设备可以连接 SAS 控制器
- PCIe vs PCI：可以看 https://zhuanlan.zhihu.com/p/26172972
