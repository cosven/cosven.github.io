#+SETUPFILE: ../theme-bigblow.setup
#+OPTIONS: ^:{}

* Python Packaging Tool Comparison

- [ ] 符合社区发展方向
- [ ] 这项技术本身是有用的
- [ ] 开发者操作简单
- [ ] 可重复


** 常见的几组概念

*** distutils 和 setuptools

- distutils 实现了分发 Python 包、扩展的机制，并提供相应工具支持，
存在于 Python 标准库中（现在我们一般不会直接使用这个包）
- setuptools 在 distutils 的基础上进行了增强和改进，其实一个突出的
能力是它允许用户定义包的依赖，依赖其它哪些包

[[https://docs.python.org/3/distributing/index.html][For more details.]]

*** egg 和 wheel
wheel 和 egg 是 Python 两种不同的打包格式。
[[https://packaging.python.org/discussions/wheel-vs-egg/][For more details: Wheel vs Egg]]
[[https://github.com/pypa/wheel#why-not-egg][Why not eggs?]]
Wheel 目前被认为是 Python 用来构建二进制包和二进制打包的标准 [[https://www.python.org/dev/peps/pep-0427/#abstract][PEP]]。
Egg 只是 setuptools 里面实现的一种格式，没有官方 PEP。

** Python 代码打包分发工具
*** buildout
buildout 或许早于 easy_install/pip

**** 常见的 buildout 一些使用问题
***** buildout 蜜汁失败
:LOGBOOK:
Got chardet 3.0.4.
While:
  Installing app.

An internal error occurred due to a bug in either zc.buildout or in a
recipe being used:
Traceback (most recent call last):
  File "build/bdist.macosx-10.11-x86_64/egg/zc/buildout/buildout.py", line 1992, in main
    getattr(buildout, command)(args)
  File "build/bdist.macosx-10.11-x86_64/egg/zc/buildout/buildout.py", line 666, in install
    installed_files = self[part]._call(recipe.install)
  File "build/bdist.macosx-10.11-x86_64/egg/zc/buildout/buildout.py", line 1407, in _call
    return f()
  File "/data/apps/fringe/eggs/zc.recipe.egg-2.0.5-py2.7.egg/zc/recipe/egg/egg.py", line 257, in install
    relative_paths=self._relative_paths,
  File "build/bdist.macosx-10.11-x86_64/egg/zc/buildout/easy_install.py", line 1078, in scripts
    for name in pkg_resources.get_entry_map(dist, 'console_scripts'):
  File "build/bdist.macosx-10.11-x86_64/egg/pkg_resources/__init__.py", line 553, in get_entry_map
    return get_distribution(dist).get_entry_map(group)
  File "build/bdist.macosx-10.11-x86_64/egg/pkg_resources/__init__.py", line 2550, in get_entry_map
    self._get_metadata('entry_points.txt'), self
  File "build/bdist.macosx-10.11-x86_64/egg/pkg_resources/__init__.py", line 2280, in parse_map
    for group, lines in data:
  File "build/bdist.macosx-10.11-x86_64/egg/pkg_resources/__init__.py", line 2851, in split_sections
    for line in yield_lines(s):
  File "build/bdist.macosx-10.11-x86_64/egg/pkg_resources/__init__.py", line 2147, in yield_lines
    for ss in strs:
  File "build/bdist.macosx-10.11-x86_64/egg/pkg_resources/__init__.py", line 2475, in _get_metadata
    if self.has_metadata(name):
  File "build/bdist.macosx-10.11-x86_64/egg/pkg_resources/__init__.py", line 1443, in has_metadata
    return self.egg_info and self._has(self._fn(self.egg_info, name))
  File "build/bdist.macosx-10.11-x86_64/egg/pkg_resources/__init__.py", line 1804, in _has
    return zip_path in self.zipinfo or zip_path in self._index()
  File "build/bdist.macosx-10.11-x86_64/egg/pkg_resources/__init__.py", line 1684, in zipinfo
    return self._zip_manifests.load(self.loader.archive)
  File "build/bdist.macosx-10.11-x86_64/egg/pkg_resources/__init__.py", line 1623, in load
    path = os.path.normpath(path)
  File "/usr/local/lib/python2.7/posixpath.py", line 342, in normpath
    initial_slashes = path.startswith('/')
AttributeError: 'NoneType' object has no attribute 'startswith'
:END:
如果你想在项目中使用某个版本的 setuptools，基本是不可能的
***** 命令失败了，构建却成功啦？
buildout 运行命令失败会返回 0

----------------------

*** dh-virtualenv
[[https://www.nylas.com/blog/packaging-deploying-python/][nylas use dh-virtualenv]]

*** how venv work?
PEP 405 
** Related Peps
*** PEP 376
这个 PEP 目标是提供一个管理系统上安装的包发行版 =(distribution)= 的标准基础设施，
让其他安装、卸载包的工具是可以相互协同工作的。
:LOGBOOK:
目前没有想到一个完美的词语来翻译 distribution。
只可意会，不能言传的感觉。
:END:

为了实现这个目标，该 PEP 提出一种新的格式来描述一个安装在系统上的分发。
该 PEP 也描述了标准库的参考实现。

这个 PEP 结合了 PEP 345，可以取代 PEP 262。

**** 基础原理
目前 Python 安装包发行版的方式存在两个问题：
1. 安装方式太多，标准不一，各种工具不能协同工作
2. 没有 API 可以获取已经安装的包的信息

***** 目前包发行版的安装方式
当前，在安装一个包的发行版时，其每个元素（文件）可以被放到不同的目录下。

例如， =Distutils= 会把 Python 代码放到 =purelib= 目录下，
在 unix-like 和 osx 中，即 lib\python2.6\site-packages 目录；对于
Windows 来说，就是 Lib/site-packages 目录。

另外， =Distutils= 的安装子命令 =install_egg_info= 会给每个包发行版
加一个 .egg-info 文件加入到 =purelib= 目录。 

举个例子：对于 =docutils= 这个发行版，它包含以下内容

- docutils: The docutils package
- roman.py: An extra module used by docutils
- docutils-0.5-py26.egg-info: A file containing the distribution
 metadata as described in PEP 314 . This file corresponds to the file
 called PKG-INFO, built by the sdist command.

一些可执行脚本，比如 =rst2html.py= ，被放到 Python 的 bin 目录。

另外一个项目， =setuptools= 它有两种其它的格式来安装包发行版，叫做 EggFormats。
包含以下内容：

- 一个自包含的 =.egg= 目录。它的子目录 =EGG-INFO= 中的 =PKG-INFO= 文件
包含所有的发行文件和发行元信息。setuptools 会在 =.egg= 目录创建
其它文件作为元信息的补充。
- 一个安装在 =site-packages= 目录的 =.egg-info= 目录，这里面包含了同样
的 =EGG-INFO= 目录。

setuptools 还会在 easy-install.pth 文件中为该包发行版加一个引用。

***** 卸载包发行版

Distutils 没有提供卸载的命令。要想卸载一个包，需要手动删除文件，编辑 .pth 文件。 
手动卸载问题很多，省略之。

但这些工具有个共同特性：它们安装一个包的发行版时，它们都可以记录这些文件，
以后删除的时候，就知道需要删除哪些东西了。

此外，Pip 项目后来增加了一个卸载功能。它可以记录所有安装的文件。

***** 这个 PEP 提出的方案

- 一个新的 =.dist-info= 目录结构，灵感来自于 EggFormats 标准
- =pkgutils= 包含新的 API 可以查询已经安装的包发行版的信息
- 在 distutils 中添加了 =uninstall= 函数和 =uninstall= 脚本

**** One .dist-info directory per installed distribution 
:LOGBOOK:
主要介绍这个目录包含哪些文件，这些文件有什么样的标准。
:END:
     
**** 实现细节

*** PEP 427
*** PEP 405 Python Virtual Environments

**** yy
- 能不能打 zip 包，以及为什么？
- 会有什么规则？
- 重写 shebang 是什么回事？

python 关键组成部分就是：动态链接库 + 可执行文件 + site 模块

**** 动机
- 依赖管理、隔离；更容易的安装和使用 Python 包
- 现在的虚拟环境工具缺乏 Python 原生支持
  rvirtualenv 没有将 Python 可执行文件拷贝到虚拟环境中，不能与
  系统 site 目录很可靠的隔离
  virtualenv 虽然拷贝了 Python 二进制，但是它需要将 site 模块
  拷贝一份，并手动将千变万化的标准库链接/拷贝到虚拟环境中，这样才能
  优雅的启动
- PYTHONHOME 环境变量

** pkg_resources 模块
[[http://setuptools.readthedocs.io/en/latest/pkg_resources.html][ref docs]]

=pkg_resources= 模块提供了用于查找，內省，激活和使用已安装的
 Python 分发版的运行时工具。

部分容易混淆概念：
#+BEGIN_QUOTE
- environment: A collection of distributions potentially available
 for importing, but not necessarily active.
- working set: A collection of distributions actually available
 for importing, as on sys.path.
- release: A snapshot of a project at a particular point in time, 
 denoted by a version identifier.
- distribution: A file or files that represent a particular release.
- A namespace package is a package that only contains other packages 
 and modules, with no direct contents of its own.
#+END_QUOTE

** FQA
*** 打包时需要需要把 pyc 带入包内？
pyc 跨平台，不跨 python 版本
eggs 是会带 pyc 的

#+BEGIN_QUOTE
Wheel archives do not include .pyc files. Therefore, when the distribution only
 contains Python files (i.e. no compiled extensions), and is compatible with
 Python 2 and 3, it’s possible for a wheel to be “universal”, similar to an sdist.
#+END_QUOTE
