#+TITLE: porting to Python 3 - 大纲
#+OPTIONS: ^:{}, num:nil

* porting to Python 3 大纲

Python 2 一用就是 7 年，再过两年，Python 2 就会在全世界范围内退休。
我们也是时候考虑宠幸下 Python 3 这个快 10 岁的宝宝了。

在 Python 的官方文档中，其中有一页文档：[[https://docs.python.org/3/howto/pyporting.html][Porting Python 2 Code to Python 3]]，
它专门介绍了怎样将代码从 Python 2 移植到 Python 3。它描述了迁移的基本流程，
并且对迁移流程的每个步骤做了一些解释， *推荐大家先去扫一眼* 。

这个大纲则是结合官方迁移文档，根据我乎的具体情况，对官方写的比较抽象
或者模棱两可的东西进行具体化，并提供相关参考资料。

** 移植的一般步骤
我们用的是 Python 2.7，迁移对我们来说是一件非常容易的事情。

注：我们在社区或者一些个人博客上，能看到许多 Python3porting 的资料，
其中很大部分都会考虑一个假设：读者仍然在使用 Python 2.5 或者
以下版本。于是，它可能会讲很多复杂奇怪的 case；它可能还会给你推荐 [[http://six.readthedocs.org/][six]] 库等。
这些资料我们很大可能是用不上的。

*** 提高测试覆盖率
如果应用已经接入了 CI 测试覆盖率，那么你可以在 ZAE 上了解应用的单元测试覆盖率。
如果还没有接入，可以参考 [[http://lavie.zhdocs.io/en/latest/user_guides/customize_jokeryml.html#id2][CI 测试覆盖率文档]]，进行接入。
使用 Boring 测试框架的项目，可以参考 [[https://git.in.zhihu.com/zhihu/question-and-answer][QA 项目]] 的配置，方便的接入。
另外，也可以考虑使用 [[https://coverage.readthedocs.io/en/coverage-4.5.1/][coverage.py]]。

*** 学习 Python 2&3 之间的区别
从这一秒开始，我们在添加或者修改代码的时候就可以注意，尽量让新增的代码
在 2&3 环境下都能正常 work。

一些关于 Python 2&3 区别的参考资料：

- 1 分钟了解 Python3 和 Python2 最大区别系列（理论篇）
  - [[https://snarky.ca/why-python-3-exists/][Why Python3 Exists]]
  - [[https://wiki.python.org/moin/Python2orPython3#What_are_the_differences.3F][Python2orPython3#What_are_the_differences]]

- 从现在开始写 2&3 兼容的代码（实践篇）
  - [[http://python-future.org/compatible_idioms.html][Writing Python 2-3 compatible code]]

- 常见 2&3 不兼容的地方（实践篇）
  - [[http://python3porting.com/problems.html][Common migration problems]]

注：对于 unicode/str/bytes 处理的最佳实践，我们会在之后的文档中进行更加详细的介绍。

*** 使用 python-future 来移植代码
我们应该知道 =2to3= 这个工具可以帮助我们简单的将 Python 2 的代码转换为 2&3
兼容的代码。futurize 可以理解为 2to3 的改进版，它是 python-future 提供的
一个脚本。另外，很多项目或者开发者都会使用 pylint 这个工具，我们在使用时
可以加上 =--py3k= 的选项。

这两个工具可以帮助我们快速定位哪些代码需要修改。至于怎么修改，我们可以使用
 [[http://python-future.org/][python-future]]。 不要用 six，也不要用 modernize。
之后，我们会有更详细的文档讲更改代码要注意哪些常见的坑，以及绕过这些坑的
最佳实践。

*** 检测依赖是否 2&3 兼容
当我们把自己的代码改成 2&3 兼容后，我们需要检查我们项目的依赖是否是支持
Python 3 的。[[https://pypi.python.org/pypi/caniusepython3][caniusepython3]] 这个工具就是帮助我们做这个事情的。

*** 接入持续集成
以前，项目的测试用例可能只是在 Python 2 的环境下能通过，而兼容 Python 3
之后，自然也需要让测试在 Python 3 也能跑通。

一种方案是使用 [[https://tox.readthedocs.io/en/latest/][tox]] 。tox 是 Python 社区开源项目的必备工具，它可以方便的
测试一个基础库是否可以在多种 Python 环境下正常工作。

注：由于我们大部分项目会使用 buildout，而 tox 自身会依赖 virtualenv，
/如果/ 它们两者不能一起工作，我们可以从 CI 层面提供支持。这个需要在之后
的实践中进行验证。

** 构建和部署
当前，我们（推荐）所有的 Python 2 项目使用 =python2/jessie= 镜像，
该镜像中包含了 Python 2.7.9 (zhihu-python)。所有的 Python 3 项目
使用 =python3/jessie= ，其 Python 版本为 3.6.4。

之后，我们会提供一个既包含 zhihu-python，又包含 Python 3.6.4 的镜像，
供项目迁移用。

** 小结
这个文档侧重于迁移的整体流程，让大家知道为什么要移植？什么时候可以开始迁移？
移植代码的时候大概要注意哪些方面的问题？当然，移植的时候还会有一些技术的细节,
这里很少提到。不过看了（前面提到的） Why Python 3 Exists 类似的文章就知道，
Python 3 和 2 最大的不同点在于它字符串那一坨的不兼容改造。
其它的变化相对都很小。无非就是给 =print= 加个括号；将 =a/b= 改成 =a//b= ；
或者改一下 import 路径等操作。我们之后还会在另外写一篇文档甚至发布一些 lib
来帮助应用移植。

最后不得不重复一下的是：
=A key point about supporting Python 2 & 3 simultaneously is that you can start today!=
