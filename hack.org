* 折腾
** TODO [#C] 使用 Emacs 一年半的感受 - Emacs 基本哲学与插件选择
*** 终端 or GUI
在 macOS iterm2 中使用 Emacs terminal 模式，会有以下问题

1. 突然 hang 住并消耗大量 CPU (100%)
2. =emacsclient -nc= 无法使用，期望能创建一个 GUI frame
3. 刚打开文件时，可能会比较卡（不知道为啥）

*** 文件树、项目浏览：treemacs vs neotree (vs speedbar)
很早以前使用过 speedbar，很难用，比如打开它时，会弹出一个 frame，我也懒得折腾。
后来尝试了 neotree，neotree 和 vim 的 nerdtree 非常像，我使用了一段时间。
但使用过程中，发现很多细节问题：比如每次打开 neotree 时，
它显示的文件目录是你上次打开的目录，它和 projectile 的联动也非常难用，
所以我几乎很少使用上它。

后来发现了 treemacs，它文档上介绍的几个特性还是非常有吸引力的：

- 看截图，颜值不错
- 可以和 projectile 集成
- 支持 project 和 workspace (和 vscode/IDE 等工具的文件浏览器更像了)

*** restclient
超级赞！比 curl 方便，比 postman (一个 chrome 插件) 好用，更容易与其它工具集成。
比如：它支持将 query 导出为 curl 格式；我们也可以直接将这个复制到代码中做为文档。

*** pyim
Emacs 中的拼音输入法，非常惊艳。给我的几个感受：

1. 惊讶：Emacs 这种文字为主的界面还可以弹出输入法！
2. M-j 就能将输入的字母变成汉字（已经没有见过这样的交互）
3. 完美的解决了系统中文输入法带来的若干麻烦。
比如我之前遇到的一个非常头疼的问题：系统中文输入法会无意间修改 buffer。

美中不足的就是词库似乎不是很够。

#+BEGIN_QUOTE
Runs queries from a plain-text query sheet, displays results as a pretty-printed XML, JSON and even images.
#+END_QUOTE

*** 自定义 mode-line
示例可以参考 init-mode-line.el

** flycheck with python-mode

flycheck 没有 flycheck-enable-checker 命令，它的 [[elisp:flycheck-disable-checker]]
命令可以达到 enable 的效果。方法是先按 =C-u= ，然后再运行命令。这样一来，
就可以为 python-mode 启用 python-pylint 等 checker 了。

也可以直接按 =C-u C-c ! x= ，这样就相当于 flycheck-enable-checker。
有兴趣的可以看 [[https://github.com/flycheck/flycheck/blob/master/flycheck.el][flycheck.el]] 源码中的 flycheck-disable-checker 函数。

*附注*

flycheck 支持多 checker，以 Python 为例，目前有 python-compile, python-pylint,
python-flake8, python-mypy 这四个 checker。

flake8 侧重代码风格检查，也会简单检查编译错误，它的检查点有[[http://flake8.pycqa.org/en/latest/user/error-codes.html#error-violation-codes][这些]]。
pylint 会进行静态分析，它的检查点很多，可以看[[http://pylint.pycqa.org/en/latest/technical_reference/features.html][这里]]，根据过去经验，
一般的代码很难完全通过 pylint 的检查。

** Emacs 高效编辑和移动   :reading:fav:
[[https://www.masteringemacs.org/article/effective-editing-movement][effective editting movement]]

我们在写代码时，有很大一部分时间都是在读代码。
比如看一个函数上下文，函数是在哪里定义的，函数属于某个类，类有哪些属性等。
也就是说，移动可能是我们最常用的行为之一。这篇文章比较完整的介绍了 Emacs
常见移动光标的方法。

** Org 文件常用设置
*** 上标 (superscripts)，下标 (subscripts)
- =#+OPTIONS: ^:nil= 忽略所有上下标 (superscripts, subscripts)
- =#+OPTIONS: ^:{}= 上下标也可以部分忽略

详情请看 https://emacs.stackexchange.com/a/10620

** TODO [#C] Emacs Python mode 增强  :elisp:editor:
实现 Dabeaz 的 Python 编辑器

** TODO [#B] Emacs anaconda-mode 进程经常 100%    :elisp:
** TODO [#C] Emacs frame tiling  :elisp:
Emacs 可以获取到屏幕大小，也可以知道当前 frame 大小，
并且可以获取所有可见的 frame，理论上可以实现 Emacs frame tiling.

参考 init-simple.el 中的 mcenter-current-frame 函数。

** term 模式                                                          :elisp:
*** 自定义 multi-term 配置
使用 =custom-set-variables= 语法即可设置 multi-term 的 =term-bind-key-alist=
等重要参数，目前已经在 =.emacs.d/elisp/init-common-packages.el= 中有所记录。

*** QUESTION xterm-256color 意味着什么？

** 遇到乱码问题时，请检查 locale 设置
1. 比如 vim 不能正确显示中文时

** Mac
*** 睡眠配置
- =sudo pmset -b disablesleep 1= 关闭盖子，不会睡眠
- =sudo pmset -b disablesleep 0= 恢复

** 升级 debian jessie 内核
从 3.16 升级到 4.7

1. 首先将 backport 加入到 sources.list 中
2. 然后搜索一下 linux-image
3. 然后安装
4. 然后 reboot

** 在 jessie 安装 neovim

1. 经过多年探索，在 jessie 上安装 neovim 的比较简单的办法是通过 linuxbrew

#+BEGIN_SRC sh
sh -c "$(curl -fsSL https://raw.githubusercontent.com/Linuxbrew/install/master/install.sh)"
#+END_SRC

2. 然后安装 vim-plug 给 neovim 用

#+BEGIN_SRC sh
curl -fLo ~/.local/share/nvim/site/autoload/plug.vim --create-dirs \
    https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
#+END_SRC
** 命令行
*** item2/tmux/neovim true color 支持

-   iterm 设置 term 环境变量为 xterm-256color
-   tmux 设置 ~set-option -ga terminal-overrides ",xterm-256color:Tc"~
-   neovim 不怎么需要设置，如果要的话，就是下面这个

    set termguicolor
    set t_8f=^[[38;2;%lu;%lu;%lum
    set t_8b=^[[48;2;%lu;%lu;%lum

举个例子：[我的配置](https://github.com/cosven/rcfiles/commit/1af74b2352967f0a937a63cb03942b91c0fc7f42)
测试脚本：[链接](https://github.com/cosven/rcfiles/commit/b608261986833bad359d13168229d9e6ccdc1a64#diff-9bf5a2f4d58325ac0e124b2525172d15) -> 如果输出的颜色润滑过度，就代表改环境是支持 true color 的。

*** linux 查看已经安装的内核

    dpkg -l | grep linux-image

*** ssh 端口映射

本地端口映射： `ssh -L 9000:cosven.dev:8000 cosven.dev`
这时，访问本地 9000 端口，就相当于访问 cosven.dev 的 8000 端口

远程端口映射： `ssh -nNT -R 2222:localhost:22 cosven.dev`
假设我们从本地可以 ssh 到 cosven.dev，但是从 cosven.dev 不能 ssh 到本地
这时，我们可以使用这种方式&#x2026;

`-N` 不登录 `-f` 后台跑

*** 替换一个目录下的所有文件中包含某个字符串的文件

=grep -rnw '*path/to/somewhere*' -e 'pattern'=

*** 查看一个程序占用了那个端口

`lsof -Pan -p PID -i`

*** 重构 - 重命名
tags: refactor, rename

```shell
linux: git grep -l 'original_text' | xargs sed -i 's/original_text/new_text/g'
mac: git grep -l 'original_text' | xargs sed -i '' -e 's/original_text/new_text/g'
```
*** 查看当前时间
以一个不错的格式输出当前时间
#+BEGIN_SRC sh
-> date +%F_%T
2022-06-23_16:23:31
#+END_SRC

** mysql installation

不知道从哪个版本之后，mysql 会限制只能从本地连接数据库。
也就是说 mysql -uxxx -pxxx -h xx.xxx.xx.xx 会连接失败，典型报错：

#+BEGIN_QUOTE
ERROR 1130 (HY000): Host 'gw-cm.dev.rack.xx.com' is not allowed to connect to this MySQL server
#+END_QUOTE

这时，我们需要进行两部操作，以允许从远程连接该数据库

1. 将 /etc/mysql/my.cnf (路径可能稍有差异) 的 bind-address 字段的值改成 0.0.0.0
2. 第二步不能少，切记
   GRANT ALL PRIVILEGES ON *.* TO <your-user-here>@'%' IDENTIFIED BY '<user-password-here>';
   FLUSH PRIVILEGES;
3. 然后重启

Ubuntu 18.04 用户名和密码保存在 =/etc/mysql/debian.cnf=

1. 添加用户： =create user cosven identified by '';=
2. 给用户添加数据库权限： =grant all privileges on *.* to cosven@'%' identified by '';=
3. =flush privileges;=

** Debian Packaging
*** SourcePackage
参考资料：[[https://wiki.debian.org/Packaging/SourcePackage]]

=Source packages= provide you with all of the necessary files to
compile or otherwise, build the desired piece of software.

*** Why looking at a source package ?
If you want to study [[https://wiki.debian.org/Packaging][packaging]], or a specific package.

If you want to know which compile-time options are enabled for
 a specific package ([[https://wiki.debian.org/DebianPackageConfiguration][DebianPackageConfiguration]]).

*** Why bother with source package if there is a binary package ?

Some build systems (e.g. cmake) and =ad-hoc= scripts provide a
convenient way to produce Binary packages in a uniform fashion.

ad-hoc scripts: 这类脚本往往有这些特性：不通用、不幂等、临时的。
https://www.zhihu.com/question/25347164/answer/90224221

*** 怎样从一个 SourcePackge 打一个 deb 包？
- [[https://wiki.debian.org/SimpleBackportCreation][Backporting]] 最简单的 backporting 方法（超好用）
- [[https://backports.debian.org/news/jessie_released_-_backports_related_changes/][Versioning]] -> 使用 ~bpo8+1 for jessie

*** 一些常见命令
- apt-cache policy xxx  # 查看一个包的版本信息

** tcpdump usage

TCP FLAGS

PSH     =  [P] (Push Data)
RST     =  [R] (Reset Connection)
SYN     =  [S] (Start Connection)
FIN     =  [F] (Finish Connection)
SYN-ACK =  [S.] (SynAcK Packet)
           [.] (No Flag Set)

- 指定 interface =tcpdump -i en0=
- 指定主机和端口 =tcpdump tcp port 23 and host 10.1.0.1=

Q：在 osx 上，建立连接会有 4 次握手？
#+BEGIN_SRC
19:29:37.157437 IP localhost.54871 > localhost.23333: Flags [S], seq 4183558234, win 65535, options [mss 16344,nop,wscale 5,nop,nop,TS val 3374013330 ecr 0,sackOK,eol], length 0
19:29:37.157538 IP localhost.23333 > localhost.54871: Flags [S.], seq 1658355569, ack 4183558235, win 65535, options [mss 16344,nop,wscale 5,nop,nop,TS val 3374013330 ecr 3374013330,sackOK,eol], length 0
19:29:37.157554 IP localhost.54871 > localhost.23333: Flags [.], ack 1, win 12759, options [nop,nop,TS val 3374013330 ecr 3374013330], length 0
19:29:37.157567 IP localhost.23333 > localhost.54871: Flags [.], ack 1, win 12759, options [nop,nop,TS val 3374013330 ecr 3374013330], length 0
#+END_SRC

在 wireshark 中可以发现，最后一个包的作用是 TCP WINDOW UPDATE，并不是必须的。
在 Linux 上测试的话，我们可以发现，不会出现最后这个包。
那为什么要有 TCP WINDOW UPDATE 这么一次操作呢？暂不深究 [[https://stackoverflow.com/questions/1466307/what-is-a-tcp-window-update][参考资料]]
** 用 dnsmasq 干点小事情
*本笔记只记录 dnsmasq 作为域名解析服务器的一些用法及原理解释*
dnsmasq 能干啥？可以把它用作域名解析服务器，缓存 DNS 请求结果。
*** 一个大致的域名解析过程

1. 程序发起一个 DNS query
2. 看 hosts 文件是否有 IP 地址映射，没有的话看本地 DNS 缓存
3. 从 /etc/resolv.conf 获取 dns server 地址
4. 将 DNS query 请求丢给 DNS server
5. 然后 DNS server 进行一系列事情帮助完成解析

dnsmasq 在这个步骤中充当 DNS server 的作用
牢记：它充当的是 DNS server 的作用。

*** 下面是在 osx 下安装使用 dnsmasq 的的记录

1. 安装启动 dnsmasq
```
brew install dnsmasq
sudo brew services start dnsmasq
# 使用下面命令看看 53 端口是否被 dnsmasq 占用
# sudo lsof -i:53
```
2. 解析 awesome.mine 域名

*操作流程理论分析*

1. 启动 dnsmasq (启动一个 dns server，它的地址默认是 127.0.0.1)
2. 配置 dnsmasq，让它解析 awesome.mine 域名
3. 在 /etc/resolv.conf 加入 dns server 地址（127.0.0.1）
4. OK

*具体的操作命令*

```
# vi /usr/local/etc/dnsmasq.conf
# 在最下面加入一行
# `address=/mine/127.0.0.1`

# vi /etc/resolv.conf
# 在前面加入一行
# `namesearver 127.0.0.1`

# sudo brew services restart dnsmasq
```
** K8s 的 DNS 拼接
- 访问 svc 地址：在 namespace 内部可以这样访问： ={svc_name}.{namespace}= 。
  举个例子： =nc tc-tidb.cosven-sysbench-s4ncr 4000= 。
- 访问 pod 地址：
  举个例子： =nc tc-tidb-0.tc-tidb-peer.cosven-sysbench-s4ncr 4000= 。
** KVM 安装虚拟机
*** 一个示例脚本

```sh
#!/bin/bash

virt-install --name=cosven-dev \
  --vcpus=8 \
  --memory=16384 \
  --graphics vnc,listen=0.0.0.0 \
  --console pty,target_type=serial \
  --cdrom=/data0/cosven/ubuntu-18.04.4-live-server-amd64.iso \
  --disk path=/data0/vms/cosven-dev,size=128,format=qcow2,sparse=false \
  --os-variant=ubuntu18.04 \
  --debug
```

*** 初始化一台 linux 机器供自己使用

1. 免密登录服务器 id_rsa.pub -> authorized_keys
2. git clone git@github.com:cosven/rcfiles.git
3. git clone git@github.com:cosven/.emacs.d.git
4. 安装 https://github.com/BurntSushi/ripgrep
5. 安装 fzf https://github.com/junegunn/fzf#using-git

*** 在 linux 启动一个 http proxy

关于 proxy：几乎所有 linux 软件都会识别 `http_proxy` 这个环境变量，
还有一部分软件会识别 `all_proxy` 这个环境变量，
比如 `export all_proxy="socks5://127.0.0.1:1090"`

1. 简易临时的 proxy 可以使用 ssh 的 socks proxy `ssh -D PORT USER@HOST`
2. 简易不临时的推荐使用 [tinyproxy](https://www.archlinux.org/packages/?name=tinyproxy)。
   apt/aur 都可以直接安装。使用前将配置文件（一般在 `/etc/tinyproxy/tinyproxy.conf`）
   中的 `Allow 127.0.0.1` 注释掉，这样就可以允许所有连接了。

`all_proxy` 据说一般是用来设置 socks 代理地址的，已知的是 curl 会识别它。
目前没有搜到关于这个环境变量的官方的解释。

简单搜索了下，它可以转发 TCP/UDP 请求。大概可以理解为它在真正的 IP 包上又包了一层。

#### 如何让 git 使用 proxy 呢？

暂时想到的办法是让 git 走 http 协议来 push `git push http://xx master`。
如果 `git push git@github..` 这种形式的话，目前还没找到好办法。
讲道理它应该也是走 socks 代理的才对，如果 git 内部支持的话，但实测好像不行。

*** 放开 Open Files 限制
修改 `/etc/security/limits.conf` 文件配置，添加一行 nofile 的配置

#+BEGIN_SRC
  #ftp             -       chroot          /ftp
  #@student        -       maxlogins       4
  *                -       nofile          1000000
  # End of file
#+END_SRC

这个对已经启动的 bash 的子进程不生效，还可能对某些系统不生效，希望后面可以补充下。
另外有个问题：
- [ ] A 主机达到 limit，B 主机尝试建立与 A 的链接，B 收到的是什么？timeout/refused？
** FreeRDP 使用举例
连接 windows 远程桌面
#+BEGIN_SRC
xfreerdp /v:192.168.3.5:3389 /u:cosven /scale:180 /dynamic-resolution
#+END_SRC

** In-place swap

#+BEGIN_SRC python
def swap_int(a, b):
    a = a ^ b
    b = a ^ b
    a = b ^ a
    return a, b

return swap_int(2, 1)
#+END_SRC

#+RESULTS:
| 1 | 2 |
** fswatch + rsync 同步文件

#+BEGIN_SRC sh
fswatch -e "./.git" . | while read file; do git ch
eck-ignore -q $file || (echo $file && rsync -av . ${ip}:${dir}); done
#+END_SRC
** CentOS 7 mysql 配置

0. CentOS 7 上默认只有 MariaDB 5.5，安装 MySQL 5.7 需要加源

1. root 初始密码可能不为空，可以在日志里面 grep 临时密码，
（这个设定有点脑残），参考 [[https://www.percona.com/blog/2016/05/18/where-is-the-mysql-5-7-root-password/][博客]] 。

#+BEGIN_SRC
grep 'temporary password' /var/log/mysqld.log
#+END_SRC

2. 修改 root 密码

MySQL 5.7 似乎对密码有要求，有字母、特殊字符、长度等，
而且逆步你不修改密码，它似乎不让你继续操作。

我们可以先改密码，然后卸载 =validate_password= 插件
#+BEGIN_SRC
set password = PASSWORD("cosven!123")
#+END_SRC

3. 创建用户

#+BEGIN_SRC
create user 'xxx'@'%' identified by 'xxx';
GRANT ALL PRIVILEGES ON *.* TO 'xxx'@'%';
#+END_SRC

='xxx'@'%'= 表示用户名为 xxx，% 代表任意主机名，表示可以从远程连接，
也可以从本地连接。
** Docker 常见命令
*** 启动 MySQL 并 expose 端口
#+BEGIN_SRC sh
docker run --name mysql80 -e MYSQL_ROOT_PASSWORD=123456 -p 33060:3306 -d mysql:8.0
#+END_SRC

*** 查看 volume/network

#+BEGIN_SRC
docker volume ls
docker network ls
#+END_SRC
** Python 编写 rest 客户端

#+BEGIN_SRC python
from functools import wraps

import requests


class RESTRequestError(Exception):
    pass


def rest(method, path, allowed_status_code=None,
         json_fields=None, query_fields=None, url_fields=None):
    """a decorator for pd restclient
    """
    allowed_status_code = allowed_status_code or [200, 201]
    json_fields = json_fields or []
    query_fields = query_fields or []
    url_fields = url_fields or []

    def _wrapper(func):
        @wraps(func)
        def wrapper(client, **kwargs):
            # extract request body and request options
            body = {}
            query = {}
            url_kwargs = {}
            req_kwargs = {}
            for key, value in kwargs.items():
                if key in json_fields:
                    body[key] = value
                elif key in query_fields:
                    query[key] = value
                elif key in url_fields:
                    url_kwargs[key] = value
                else:
                    req_kwargs[key] = value

            # cook api url
            try:
                path_ = path.format(**url_kwargs)
            except KeyError:
                raise PDRequestError('build url failed')
            url = client.cook_url(path_)

            # call client.request method
            if method == 'POST':
                resp = client.request(method, url, json=body, **req_kwargs)
            elif method == 'GET':
                resp = client.request(method, url, params=query, **req_kwargs)
            elif method == 'DELETE':
                resp = client.request(method, url, **req_kwargs)
            else:
                raise RESTRequestError(f'unknown request method: {method}')

            # check if status code are allowed
            status_code = resp.status_code
            if status_code not in allowed_status_code:
                raise RESTRequestError(f'unallowed status_code: {status_code}')

            return resp
        return wrapper
    return _wrapper
#+END_SRC
** MySQL fixtures

*** easy
  :PROPERTIES:
  :engine:   mysql
  :dbhost:   0.0.0.0
  :database: test
  :dbuser:   root
  :dbpassword: 123456
  :cmdline:  --protocol=tcp
  :exports:  both
  :END:

#+BEGIN_SRC sql
use test;

drop table if exists user;

create table user (
  id int not null auto_increment,
  name varchar(64) not null,
  star int not null,
  company varchar(16),
  primary key (`id`)
);

insert into user
  (name, star, company)
values
  ('cosven', 3, 'pingcap'),
  ('cosven', 4, 'zhihu'),
  ('yannnli', 5, 'sogou'),
  ('yannnli', 4, 'alibaba'),
  ('amy', 4, 'zhihu'),
  ('zyguan', 5, 'pingcap'),
  ('cyliu', 3, null);
#+END_SRC
** 查看 container 的在宿主机的 pid
#+BEGIN_SRC
docker inspect -f '{{.State.Pid}}' <container id>
#+END_SRC
** netstat vs lsof
https://serverfault.com/a/155560
** prometheus rate 函数的坑

基础理论：rate(xxx[30]) 计算的时候需要最少取两个点，一般情况 15s 一个点。

一种事实情况：当用一个 ts=200.222 的时间戳去查询时，也就是在 [170.222, 200.222] 区间内必须要有两个点。
而 prometheus 在这个区间附近正好有几个点：它们分别是 170.111, 185.111。200.111 这个点还在计算当中。
于是真正符合区间要求的就一个 ts=185.111 的点，所以这个 rate 查询就查不出来值，于是 QPS 就有误报。

把 query 改成如下应该就可以
#+BEGIN_SRC
sum(irate(tidb_executor_statement_total[1m])) < 0.1 * sum(rate(tidb_executor_statement_total[1m] offset 2m))
#+END_SRC
