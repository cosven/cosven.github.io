* DevOps
** 功能开关、配置、A/B 测试

facebook 那篇文章最主要的还是配置，关于 A/B Test 涉及比较少。关于 A/B Test 目前多是参考 google 这篇论文
https://static.googleusercontent.com/media/research.google.com/en//pubs/archive/36500.pdf

ABTest / 配置管理 / 功能开关体系这篇 paper 写的最好
http://sigops.org/sosp/sosp15/current/2015-Monterey/printable/008-tang.pdf

** Holistic Configuration Management at Facebook                    :reading:
- 为什么要看这篇 paper？
- 它大概讲了什么？
- 它有解决你的问题吗？
- 你对它哪个部分最感兴趣？

ps: 这篇论文我自己并没有完整的看完，后面有一部分是匆匆带过。

*** 为什么看这篇 paper？
一天，我在知乎上看到一篇文章讲“[[https://zhuanlan.zhihu.com/p/32712056][怎样才是真正的灰度发布]]”。

它从这三个方面讲：
1. 精确地流量分发控制。根据用户 ID 或者用户所在地域（省份）等方面进行流量分发控制。
2. 监控系统支撑，监控一些指标变化。产品方面：点击率，pv，uv；应用层：错误率，吞吐量；
基础设施层：CPU，内存等。
3. 灵活的发布系统。支持服务多个版本（长期）共存等。

其中，我对文章这样一句话“也就是硅谷里常说的 A/B testing，也可以归到灰度发布的范畴。”
印象比较深刻。在我理解中，灰度发布即为灰度部署，和A/B 测试没有必然关系。
灰度发布更倾向保证新版本代码可以正确运行，而 A/B test 是为产品服务的，优化产品策略用。

一谈到 A/B testing，我就想起一位同事经常推荐的这篇 paper。不过这 paper 和灰度发布
好像没半毛钱关系。

*** 它大概讲了什么？

*摘要*: This paper gives a comprehensive description of the use cases,
design, implementation, and usage statistics of a suite of tools
that manage Facebook’s configuration end-to-end, including
 the frontend products, backend systems, and mobile apps.

- *Runtime configuration management* is an important problem for
 Internet services, but it is not well defined in the literature.
We describe the problem space and the real use cases from our experience,
in the hope of motivating future research in this area.
- We describe *Facebook’s configuration management stack*, which addresses
 many challenges not covered by prior work, e.g., gating product rollouts,
config authoring, automated canary testing, mobile config,
and a hybrid subscription-P2P model for large config distribution.
This is the first published solution of holistic configuration management
 for Internet services.
- We report the *statistics and experience* of operating a large-scale
configuration management stack, which are made available in the
 literature for the first time. For exam- ple, do old configs become dormant,
and how often do config changes expose code bugs?


*配置管理的主要挑战* ：

- *Configuration sprawl* （配置混乱）：Historically, each system could use its own configuration store and
 distribution mechanism, which makes the site as a whole hard to manage.
- *Configuration authoring and version control* （配置编写与版本控制）.
- *Defending against configuration errors*.
- *Configuration dependency* ：For example, after the monitoring tool’s config
 is updated to enable a new monitoring feature, the monitoring configs
 of all other systems might need be updated accordingly.
- *Scalable and reliable configuration distribution*.

*场景和解决方案* ：

- Gating new product features.（大概理解为灰度？）
- Conducting experiments.（大概理解为 A/B 测试把）
- Application-level traffic control. 比如修改 HAProxy 配置？
- Topology setup and load balancing. （基础设施变更
- Monitoring, alerts, and remediation.（调整报警参数）
- Updating machine learning models.
- Controlling an application’s internal behavior.（比如调整容器 CPU）

*用到的工具* ：

- *Configerator* provides all the foundational functions, including version control,
 authoring, code review, automated canary testing, and config distribution.
Other tools are built on top of Configerator and provide specialized functions.
- *Gatekeeper* controls the rollouts of new product features. Moreover, it
can also run A/B testing experiments to find the best config parameters.
- PackageVessel uses peer-to-peer file transfer to assist the distribution
 of large configs.
- Sitevars is a shim layer that provides an easy-to-use configuration API
for the frontend PHP products.
- MobileConfig manages mobile apps’ configs on Android and iOS, and bridges
 them to the backend systems such as Configerator and Gatekeeper.


*Configerator, Sitevars, and PackageVessel*

- *Configuration Authoring*: 用代码生成配置（thrift 等）
- Improving Usability through UI and Sitevars
- Preventing Configuration Errors
- Scalable and Reliable Configuration Distribution（ZooKeeper）
- Distributing Large Configs through PackageVessel
- Improving Commit Throughput（多个同时更改（同一个）配置）
- Fault Tolerance

** The Death of Microservice Madness in 2018  :reading:
[[http://www.dwmkerr.com/the-death-of-microservice-madness-in-2018/]]

1. 讲了什么是微服务，微服务为什么流行？独立部署-独立开发-独立扩容-可复用
2. 为啥微服务之前没流行？基础设施健全了
3. 微服务有什么问题？
   开发复杂度 -> 运维复杂度-devops 复杂度 -> 需要这方面专家 -> 实际系统之间边界模糊
   服务有状态 -> 服务之前有数据交换 -> 版本管理 -> 分布式事务
4. 避免盲目使用微服务
   团队大小-服务是否有状态-服务解决的问题是否是多个-依赖是否复杂-团队是否有专家
5. 微服务不是一种架构：Component 化的一种实现
