* Testing

** 测试覆盖率

覆盖率有几种（但网上有多种解释，但大同小异），这里参考维基百科给的解释

- Statement coverage：经常被翻译成行覆盖，也会被翻译成指令覆盖。我理解 statement 就是语句的意思，对于比较好理解。
- Decision coverage：维基百科说和分支覆盖不同
- Condition coverage：也称为谓词覆盖
- Condition/decision coverage：同时满足 Decisioon 和 Condition 覆盖
- Modified condition/decision coverage：是 C/DC 的延伸，更加严格一些。sqlite
- 多重条件覆盖：类似全组合

有个例子可以比较好解释 Condition 和 Decision 覆盖率的区别
#+BEGIN_SRC
if a and b then
#+END_SRC
下面两个用例可以得到 100% 的 Condition 覆盖率
- a=true, b=false
- a=false, b=true
  但是 Decision 覆盖率不是 100%

#+BEGIN_SRC
if (a or b) and c then
#+END_SRC
以下的测试可满足条件/判断覆盖：
- a=true, b=true, c=true
- a=false, b=false, c=false

*测试覆盖率 100% 也会有 bug* 。在这个例子中 https://github.com/pingcap/tidb/pull/18814 ，
这一段代码的每个分支都被覆盖到了，但需要 keys 长度大于 2，且一部分 key 满足 if，一部分满足 else，
才可以复现。

#+BEGIN_SRC go
if s.cached != nil {
        tmp := keys[:0]
        for _, key := range keys {
                if val, ok := s.cached[string(key)]; ok {
                        m[string(key)] = val
                } else {
                        tmp = append(tmp, key)
                }
        }
        keys = tmp
}
#+END_SRC
