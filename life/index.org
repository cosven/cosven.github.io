#+SETUPFILE: ../theme-bigblow.setup

* 12 月份全纪录

*** DONE 学习 org mode [100%]                                          :self:
    CLOCK: [2017-12-04 Mon 10:47]--[2017-12-04 Mon 12:14] =>  1:17
- [X] 了解时间管理的工作流程
- [X] 看看能不能把一天的时线给打印出来

*** TODO 了解邻接表，和学弟沟通 [100%]                                 :self:
    CLOCK: [2017-12-04 Mon 12:30]--[2017-12-04 Mon 13:00] =>  0:30
- [X] 大概懂了邻接表是个啥

**** DONE c 语言结构体
1. 结构体怎样初始化

**** TODO 用 c 语言实现一把拓扑排序
     CLOCK: [2017-12-13 Wed 11:05]--[2017-12-13 Wed 11:10] =>  0:05
用 c 语言实现解决 pta 那个 [[https://pintia.cn/problem-sets/16/problems/708][问题]]

*** DONE 支持 HDFS [4/4]                                               :work:
**** DONE CI 传输 s3 URL
     CLOCK: [2017-12-05 Tue 15:45]--[2017-12-05 Tue 17:59] =>  2:14
     CLOCK: [2017-12-05 Tue 10:49]--[2017-12-05 Tue 15:33] =>  4:44
     CLOCK: [2017-12-04 Mon 14:12]--[2017-12-04 Mon 15:00] =>  0:48

**** DONE 研究容器 DNS 解析失败的问题
     CLOCK: [2017-12-05 Tue 15:05]--[2017-12-05 Tue 20:05] =>  5:00
1. 控制变量法
2. route 的作用：route 是 IP 层面的东西；而 DNS 解析是 UDP 层面的东西。
   - IP 是网络层：看 route
   - TCP/UDP 是传输层：dns 解析等
3. netstat 的一个应用
   =udp    0      0 0.0.0.0:53    0.0.0.0:*   1434/dnsmasq=
   好像没啥好说的

**** DONE 开发生产环境均可以访问 HDFS
     CLOCK: [2017-12-06 Wed 14:00]--[2017-12-06 Wed 18:02] =>  4:02
1. HTTP status code: 307 vs 303
307 接受 POST/PUT 等请求
303 会建议你转成 GET 请求

2. Nginx 可以自动转发 307 请求吗？
   可以，一种方案：https://serverfault.com/a/792035

3. nginx 可以配置 standby upstream 吗？

**** DONE 部署系统兼容 HDFS 方案
     CLOCK: [2017-12-06 Wed 18:05]--[2017-12-06 Wed 19:23] =>  1:18

嗅觉：一个函数太长，应该有问题；引入的依赖太多或者太大，应该是有问题的。大概是这样吧...3

1. 放在 model 下，要嵌套两层概念：
artifact/storage: aws, hdfs
artifact/type: static, tarball

2. HDFS/AWS 保持相同的方法


[[https:https://mdn.mozillademos.org/files/13785/HTTPRedirect.png][redirect 流程图]]

*** DONE oauth 在前后端分离中的应用 [100%]                             :work:
    CLOCK: [2017-12-04 Mon 22:48]--[2017-12-05 Tue 01:53] =>  3:05

- [[https://zh.wikipedia.org/wiki/%E8%B7%A8%E7%AB%99%E8%AF%B7%E6%B1%82%E4%BC%AA%E9%80%A0-][CSRF 跨站请求伪造]] -> 重要操作不要用 GET；CSRF 保护措施（cookie 和 query 参数中带 csrf_token）


**** DONE 目前例子中实现的方案
1. 访问 http://A 时，前端检测是否有 token，没有 token 就重定向到 /oauth/authorize 页面
2. 用户在 authorize 页面输入用户名和密码，如果验证成功，重定向到用户指定的 redirect_url 上。
   比如 /oauth/callback 上（这个页面是前端的一个页面）。（此时，页面是有 grant_code 的）
3. 前端用 grant_code 给后端，后端用这个 code 去 oauth 换 token。
   换取成功后，后端把这个 token 保存起来。再把 token 返回给前端，前端存起来。
4. 之后，后端每次都去校验前端传过来的 token

**** DONE 一般的实现方案 [100%]
1. 设置 cookie（有安全风险）（好像比较传统）
2. 在 localStorage 中保存

3. [X] token 方案 vs session 方案
token 提高了安全性，避免了额 CSRF 攻击
但是认为可以修改 token，万一踩狗屎了呢？

- [X] 传统 token 方案 vs JWT
jwt 是个自包含的东西，服务端不需要去查数据库来验证这个东西是否正确。
人为不方便修改 jwt。

**** DONE SSO 实现方案
思路：[[https://segmentfault.com/a/1190000005357718]]

A,B 是应用服务器。L 是认证服务器。
客户端存一个 L 分发下去的 session_id。
A 检测客户端是否有 session_id_a，没有让 L 去验证，验证完之后，设置一个 session_id_a。
B 同理。

*** 2017-12-5 早上琐事
记录一下以免忘记了

***** 改进的地方

1. 早饭可以更早点准备 -> 留下更多时间
2. 事先约车 -> 机会不多且麻烦，但需要做吧
3. 不确定的事情尽量 check 清楚
   - 比如今天很急
   - 这种情况需不需要接送（如果单方面觉得不需要送，就需要事先 check）

***** 另外告诫自己

1. 不要斤斤计较
2. 耐心要更好
3. 生气是解决不了任何问题的，不要生气
4. 什么事都要先朝更好的方向去努力...(๑•̀ㅂ•́)و✧加油

***** Q&A
1. 遇到他人不说话
*** DONE emacs 进入 evil 时代
    CLOCK: [2017-12-05 Tue 15:35]--[2017-12-05 Tue 15:45] =>  0:10

1. 为什么要用 evil？
   h/j/k/l 用起来爽

*** TODO 迁徙事宜 [/]                                                  :self:

**** TODO 杭州有哪些大的互联网公司？

**** TODO 杭州有哪些 Python 牛人？

**** TODO 杭州有哪些酷酷的公司？

**** TODO 杭州有哪些 Python 大厂？

**** TODO 杭州有什么搞物联网/机器人厂？

**** TODO 网易杭州有哪些工作？
**** TODO 阿里有哪些工作？
*** DONE 补充金丝雀回滚文档
*** TODO 东北行
- *漠河总结* 如果有票，就可以去，前后两天假，住宿条件，游玩基本没有问题。价格大概 800 - 1000 - 1250 左右。
- *雪乡总结* 看下面
**** DONE 漠河行程方案 -> 放弃漠河
***** DONE 飞机方案

29 号 11:00 北京到漠河 15:30: 1700

好处：29 号到漠河，去程不慌不忙
劣势：多花费 1000 左右

***** DONE 火车方案 -> 哈尔滨 -> 漠河

1. 28号晚上火车去哈尔滨，29号早上到 --- 软：400，硬：260
1. 哈尔滨停留半天
2. 29号晚上火车去漠河，30 早上到 --- 
3. 在漠河睡一个晚上（玩一天半）
4. 31号晚上火车去哈尔滨
5. 1 号下午高铁回北京（这样子的话，回北京就晚上 11 点左右了

好处：经典路线？
劣势：需要抢北京到哈尔滨到漠河的车票

***** DONE 火车方案 -> 齐齐哈尔 -> 漠河
齐齐哈尔到漠河飞机太贵 -> 不靠谱

1. 28 火车从北京到齐齐哈尔：T47 19:00 -> 9:45。29 号上午到齐齐哈尔
1. 齐齐哈尔停留半天
2. 29 号晚上，齐齐哈尔到漠河：K7041 22:06 -> 09:57。30 号到漠河
3. 回程没啥区别

好处：路线还行，相比于哈尔滨，只需要抢一张票

**** DONE 其它游玩景点研究
     CLOCK: [2017-12-20 Wed 08:00]--[2017-12-20 Wed 09:10] =>  1:10
     CLOCK: [2017-12-19 Tue 20:47]--[2017-12-19 Tue 21:30] =>  0:43

***** 沈阳
最多玩一天差不多了
帅府；博物馆；918 博物馆等历史风景
东三省中心城市？

**** DONE 跟团游调研
     CLOCK: [2017-12-22 Fri 20:00]--[2017-12-22 Fri 21:56] =>  1:56
***** 哈尔滨到雪乡到吉林
总评：路线还不错，但是 29 号需要请一天假。
需要抢长春/吉林到北京的票。请不到的话，2 号也要请一天假。
http://www.youxiake.com/lines.html?id=20514

早上 6.15 哈尔滨集合
最早一趟到哈尔滨的火车是 6.12，所以得提前一天到

吉林返回：13：00 以后 ->
长春返回：15：00 以后返回的票 ->
目前都没票

***** 漠河 - 游侠客（4 天，时间不够，放弃）
第一天（30 号上午到漠河）：全国 - 漠河
第二天（31 号）：
第三天（1 号）：
第四天（2 号）：

***** 代替定火车票
哈尔滨到漠河，提前 7 天，150 一个人

***** 漠河 - 小北旅行
- 时间：3 天 - 可以
- 价格：越野 1280 / 轿车 1000
- 评价都还不错
- 但是不包火车票
- 住宿条件没说清楚 - 问了，有标间，也有 4 人炕

***** 漠河 - 大伟自由行
- 时间：3 天
- 价格：680 / 1280
- 评价都还不错
- 不饱火车票
- 住宿：一晚火炕，一晚标间
- 价格差别的地方：住宿条件提高许多，小火炕 vs 体验火炕；车；多了两个项目。

***** 雪乡 - 金牌旅游 - 3 日游 - 有两人炕 1000 - 17000 - 1199 每人
***** 雪乡 - 龙美旅行 - 2 日游 - 正常拼炕 - 加 400 块钱可以双人炕 - 760 - 1350 - 950 每人
***** 雪乡 - 天狼户外旅行 - 3 日游（哈尔滨晚上酒店他们订好了） - 双人坑（两晚总共 600 块钱）- 1580 每个人
***** 雪乡 - 卡兹户外 - 3 日游 - 拼炕 - 4 人 - 男女分开
***** 雪乡 - 北方假期 - 3 日游 - 已满

*** TODO 离线任务滚动部署
    CLOCK: [2017-12-19 Tue 14:11]--[2017-12-19 Tue 19:44] =>  5:33
    CLOCK: [2017-12-19 Tue 14:09]--[2017-12-19 Tue 14:11] =>  0:02
    CLOCK: [2017-12-18 Mon 20:02]--[2017-12-18 Tue 20:30] =>  0:28
    CLOCK: [2017-12-15 Fri 17:10]--[2017-12-15 Fri 20:03] =>  2:53
    CLOCK: [2017-12-14 Thu 17:00]--[2017-12-14 Thu 22:58] =>  5:58
    CLOCK: [2017-12-13 Wed 16:52]--[2017-12-13 Web 19:00] =>  2:08
    CLOCK: [2017-12-13 Wed 14:39]--[2017-12-13 Wed 16:40] =>  2:01

**** DONE 滚动部署方案
     CLOCK: [2017-12-22 Fri 11:00]--[2017-12-22 Fri 17:34] =>  6:34

部署就是一个发布的过程。
发包的过程，熟悉吗？发布和发包过程是不是比较类似呢？
发布和代码变更过程是不是类似呢？也有点类似 Release/Canary/ReleaseCandidate

***** 一些基本认识（基础逻辑）

1. 一个版本的生命周期
| 没上线    | 灰度中 | 上线了  | 下线了    |
|-----------+--------+---------+-----------|
| Candidate | Canary | Releasd | Destroyed |


如果已经部署过 newbay 了
|           | percent | t<10 gc | release canary | t>10 gc | total version |
| --------  |  ------ | -----   | ------         | ------  |    ---------- |
| initial   |       0 | Y       | N/A            | Y       |             1 |
| releasing |   0-100 | N       | Y              | N       |             2 |
| released  |   0-100 | N       | N              | N       |             2 |
| obsolete  |       0 | N       | N/A            | Y       |             1 |


构建 -> (Artifact) -> Candidate -> 测试环境 -> 办公室环境 -> 生产环境
DEV -> Testing -> tarball -> alpha -> beta -> RC -> Release

生产环境：-> 灰度 -> 上线。上线失败和成功

1. *假设 Alpha 对应 Canary1，Beta 对应 Canary2*
那么有三种环境：Testing/Office/Production
每个版本有几个状态：Alpha(Canary1)/Beta(Canary2)/Release(Production) - RC(正在上线的版本)

2. *canary 应该被看做百分比，而不应该看做 stage*
看做 stage 有很多麻烦... 比如:
set_stage_version('canary', 'xxx')  # 失败的设计
set_version('Production', 'xxx', percent=20)  # 成功

3. *一个 version 有多个 stage，stage 是 version 的属性*

4. 上线状态和 Stage 概念是正交，还是咋样？

一个版本需要状态有哪些： Ready -> Canary -> Releasing -> Released -> Outdated

|            | 正在上线 | 已经上线   | 已经下线 |
| production | RC       | Released   | Outdated |
| canary     | ____     | Canary     | Outdated |
| office     | ____     | office/(R) | Outdated |
| testing    | ____     | testing(R) | Outdated |

正交的缺点：
1. 有些正交结果没有意义

假设以后使用百分比：
这种情况有点问题，不能判断哪个是生产环境。（没有办法明确的表明，当前处于灰度阶段）
| v1 | PROD | 已经上线 | 20% |
| v2 | PROD | 已经上线 | 80% |

| v1 | PROD | 正在上线 | 30% |
| v2 | PROD | 已经上线 | 70%  |

假设
| v1 | PROD | Canary   | 20% |
| v2 | PROD | Released | 20% | 

| v1 | PROD | Releasing | 20% |
| v2 | PROD | Released  | 80% |

***** TODO 一个 stage 对应多个 version
1. 理论上可以
2. stage_version_map 干了啥？
3. 存在两个 production version -> 没办法判断金丝雀版本是否与生产环境版本一样，没办法回滚金丝雀
    1. 如果只有离线任务的话，就无所谓
    2. 不会滚，并进行提醒
4. 存在两个 production 版本，部署金丝雀时，不知道该缩放哪个版本
    1. 只增不减（如果只有离线任务，也不会有这个问题）

实际证明：不太可行。一个 stage 必须要有一个主版本，
扩容的时候总不能两个都扩把？（其实两个都扩也没有多大问题把）

**** 兼容滚动部署 -> nothing need to do
**** TODO 实现离线任务滚动部署

*** Emacs 折腾
**** DONE 折腾 Python IDE -> Elpy
    CLOCK: [2017-12-14 Thu 12:59]--[2017-12-14 Thu 23:00] => 10:01
**** DONE Emacs workspace 管理
     CLOCK: [2017-12-18 Tue 20:35]--[2017-12-18 Tue 22:00] =>  1:25
perspeen 代替以前的 iTerm2 + Vim + Tmux + shell 的工作模式

*** TODO feeluown-core 开发 [33%]

**** DONE show handler 实现
     CLOCK: [2017-12-18 Mon 20:00]--[2017-12-18 Mon 20:01] =>  0:01

**** TODO show artist 等功能
**** TODO 确保 add/remove/list 等命令可用

实现 show handler 的基础架构

*** oauth2 杂事
    CLOCK: [2017-12-20 Wed 13:40]--[2017-12-20 Wed 21:09] =>  7:29
**** DONE 发邮件失败
**** DONE 同步信息时使用批量接口
**** TODO oauth2 支持 redirect url wildcard
*** TODO cousera 操作系统课程
**** DONE 第一章：操作系统概述
操作系统特征：共享、并发、随机、虚拟

**** TODO 第二章：操作系统运行环境
*** TODO 《unix 网络编程》
*** TODO 《operating system: three easy pieces》
*** TODO gunicorn 模型
**** TODO 当一个 worker timeout 之后，gunicorn 会干什么
*** 个人反思：整理个人状态

**** 2017-12-21

*最近状态不好？不好在哪些方面？*

1. 工作效率低
2. 但是时间花费不少
3. 烦恼

效率为啥低 ->
有段时间，上午自己会研究平时遇到的问题
有段时间，花了一些在折腾 emacs 上
另外，要甩锅的地方，就是提个 MR，但是流程长。另外方案也不一样
*** 部署改进
**** 日志方向
现在的日志是一个 process 对应一个日志
但理论上应该是一个 deploy 对应一个日志，然后日志分 process
**** 概念方向
canary -> alpha
canary2 -> beta
**** TODO 部署卡顿的问题


