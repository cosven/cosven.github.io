* 代码片断
** In-place swap

#+BEGIN_SRC python
def swap_int(a, b):
    a = a ^ b
    b = a ^ b
    a = b ^ a
    return a, b

return swap_int(2, 1)
#+END_SRC

#+RESULTS:
| 1 | 2 |

** fswatch + rsync 同步文件

#+BEGIN_SRC sh
fswatch -e "./.git" . | while read file; do git ch
eck-ignore -q $file || (echo $file && rsync -av . ${ip}:${dir}); done
#+END_SRC

** CentOS 7 mysql 配置

0. CentOS 7 上默认只有 MariaDB 5.5，安装 MySQL 5.7 需要加源

1. root 初始密码可能不为空，可以在日志里面 grep 临时密码，
（这个设定有点脑残），参考 [[https://www.percona.com/blog/2016/05/18/where-is-the-mysql-5-7-root-password/][博客]] 。

#+BEGIN_SRC
grep 'temporary password' /var/log/mysqld.log
#+END_SRC

2. 修改 root 密码

MySQL 5.7 似乎对密码有要求，有字母、特殊字符、长度等，
而且逆步你不修改密码，它似乎不让你继续操作。

我们可以先改密码，然后卸载 =validate_password= 插件
#+BEGIN_SRC
set password = PASSWORD("cosven!123")
#+END_SRC

3. 创建用户

#+BEGIN_SRC
create user 'xxx'@'%' identified by 'xxx';
GRANT ALL PRIVILEGES ON *.* TO 'xxx'@'%';
#+END_SRC

='xxx'@'%'= 表示用户名为 xxx，% 代表任意主机名，表示可以从远程连接，
也可以从本地连接。
** Docker 常见命令
*** 启动 MySQL 并 expose 端口
#+BEGIN_SRC sh
docker run --name mysql80 -e MYSQL_ROOT_PASSWORD=123456 -p 33060:3306 -d mysql:8.0
#+END_SRC

*** 查看 volume/network

#+BEGIN_SRC
docker volume ls
docker network ls
#+END_SRC
** Python 编写 rest 客户端

#+BEGIN_SRC python
from functools import wraps

import requests


class RESTRequestError(Exception):
    pass


def rest(method, path, allowed_status_code=None,
         json_fields=None, query_fields=None, url_fields=None):
    """a decorator for pd restclient
    """
    allowed_status_code = allowed_status_code or [200, 201]
    json_fields = json_fields or []
    query_fields = query_fields or []
    url_fields = url_fields or []

    def _wrapper(func):
        @wraps(func)
        def wrapper(client, **kwargs):
            # extract request body and request options
            body = {}
            query = {}
            url_kwargs = {}
            req_kwargs = {}
            for key, value in kwargs.items():
                if key in json_fields:
                    body[key] = value
                elif key in query_fields:
                    query[key] = value
                elif key in url_fields:
                    url_kwargs[key] = value
                else:
                    req_kwargs[key] = value

            # cook api url
            try:
                path_ = path.format(**url_kwargs)
            except KeyError:
                raise PDRequestError('build url failed')
            url = client.cook_url(path_)

            # call client.request method
            if method == 'POST':
                resp = client.request(method, url, json=body, **req_kwargs)
            elif method == 'GET':
                resp = client.request(method, url, params=query, **req_kwargs)
            elif method == 'DELETE':
                resp = client.request(method, url, **req_kwargs)
            else:
                raise RESTRequestError(f'unknown request method: {method}')

            # check if status code are allowed
            status_code = resp.status_code
            if status_code not in allowed_status_code:
                raise RESTRequestError(f'unallowed status_code: {status_code}')

            return resp
        return wrapper
    return _wrapper
#+END_SRC
** MySQL fixtures

*** easy
  :PROPERTIES:
  :engine:   mysql
  :dbhost:   0.0.0.0
  :database: test
  :dbuser:   root
  :dbpassword: 123456
  :cmdline:  --protocol=tcp
  :exports:  both
  :END:

#+BEGIN_SRC sql
use test;

drop table if exists user;

create table user (
  id int not null auto_increment,
  name varchar(64) not null,
  star int not null,
  company varchar(16),
  primary key (`id`)
);

insert into user
  (name, star, company)
values
  ('cosven', 3, 'pingcap'),
  ('cosven', 4, 'zhihu'),
  ('yannnli', 5, 'sogou'),
  ('yannnli', 4, 'alibaba'),
  ('amy', 4, 'zhihu'),
  ('zyguan', 5, 'pingcap'),
  ('cyliu', 3, null);
#+END_SRC
** 查看 container 的在宿主机的 pid
#+BEGIN_SRC
docker inspect -f '{{.State.Pid}}' <container id>
#+END_SRC

** netstat vs lsof
https://serverfault.com/a/155560

** prometheus rate 函数的坑

基础理论：rate(xxx[30]) 计算的时候需要最少取两个点，一般情况 15s 一个点。

一种事实情况：当用一个 ts=200.222 的时间戳去查询时，也就是在 [170.222, 200.222] 区间内必须要有两个点。
而 prometheus 在这个区间附近正好有几个点：它们分别是 170.111, 185.111。200.111 这个点还在计算当中。
于是真正符合区间要求的就一个 ts=185.111 的点，所以这个 rate 查询就查不出来值，于是 QPS 就有误报。

把 query 改成如下应该就可以
#+BEGIN_SRC
sum(irate(tidb_executor_statement_total[1m])) < 0.1 * sum(rate(tidb_executor_statement_total[1m] offset 2m))
#+END_SRC
